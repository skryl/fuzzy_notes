#!/usr/bin/env ruby

THIS_FILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
$LOAD_PATH.unshift(File.dirname(THIS_FILE))

require 'optparse'
require 'fuzzy_notes'

options = {}
need_extra_args = [:cat, :edit, :encrypt, :decrypt]
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: fnote [options] [keyword1, keyword2...]"

  opts.on("-c", "--cat", "Dump notes to stdout") { |opt| options[:cat] = true }
  opts.on("-l", "--list", "List all notes in note directory with statistics") { |opt| options[:list] = true }
  opts.on("-i", "--info", "Alias for 'list'") { |opt| options[:info] = true }
  opts.on("-v", "--verbose", "Print debug info") { |opt| options[:verbose] = true }
  opts.on("-e", "--encrypt", "Encrypt matching notes") { |opt| options[:encrypt] = true }
  opts.on("-d", "--decrypt", "Decrypt matching notes") { |opt| options[:decrypt] = true }
  opts.on("-h", "--help", "Show this message") { 
    puts opts 
    exit
  }
end

begin
  optparse.parse!(ARGV)                                                                                                                                                                                                 
  options[:edit] = true if options.values.compact.empty?
  # check for extra args if necessary
  if need_extra_args.any? {|opt| options[opt]} && ARGV.empty?
    puts optparse
    exit
  end
rescue OptionParser::ParseError => e
  puts optparse
end

notes = FuzzyNotes.new(ARGV)
if options[:list] || options[:info]
  notes.info
elsif options[:cat]
  notes.cat
elsif options[:encrypt]
  notes.encrypt
elsif options[:decrypt]
  notes.decrypt
else 
  notes.edit
end
